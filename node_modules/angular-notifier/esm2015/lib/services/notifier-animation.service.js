/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/notifier-animation.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { fade } from '../animation-presets/fade.animation-preset';
import { slide } from '../animation-presets/slide.animation-preset';
/**
 * Notifier animation service
 */
export class NotifierAnimationService {
    /**
     * Constructor
     */
    constructor() {
        this.animationPresets = {
            fade,
            slide,
        };
    }
    /**
     * Get animation data
     *
     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation
     * direction (either in or out) as well as the notifications (and its attributes) itself.
     *
     * @param {?} direction    Animation direction, either in or out
     * @param {?} notification Notification the animation data should be generated for
     * @return {?} Animation information
     */
    getAnimationData(direction, notification) {
        // Get all necessary animation data
        /** @type {?} */
        let keyframes;
        /** @type {?} */
        let duration;
        /** @type {?} */
        let easing;
        if (direction === 'show') {
            keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);
            duration = notification.component.getConfig().animations.show.speed;
            easing = notification.component.getConfig().animations.show.easing;
        }
        else {
            keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);
            duration = notification.component.getConfig().animations.hide.speed;
            easing = notification.component.getConfig().animations.hide.easing;
        }
        // Build and return animation data
        return {
            keyframes: [keyframes.from, keyframes.to],
            options: {
                duration,
                easing,
                fill: 'forwards',
            },
        };
    }
}
NotifierAnimationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NotifierAnimationService.ctorParameters = () => [];
if (false) {
    /**
     * List of animation presets (currently static)
     * @type {?}
     * @private
     */
    NotifierAnimationService.prototype.animationPresets;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItYW5pbWF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLW5vdGlmaWVyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL25vdGlmaWVyLWFuaW1hdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDbEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDZDQUE2QyxDQUFDOzs7O0FBUXBFLE1BQU0sT0FBTyx3QkFBd0I7Ozs7SUFXbkM7UUFDRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUc7WUFDdEIsSUFBSTtZQUNKLEtBQUs7U0FDTixDQUFDO0lBQ0osQ0FBQzs7Ozs7Ozs7Ozs7SUFZTSxnQkFBZ0IsQ0FBQyxTQUEwQixFQUFFLFlBQWtDOzs7WUFFaEYsU0FBMkM7O1lBQzNDLFFBQWdCOztZQUNoQixNQUFjO1FBQ2xCLElBQUksU0FBUyxLQUFLLE1BQU0sRUFBRTtZQUN4QixTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDaEgsUUFBUSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDcEUsTUFBTSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDcEU7YUFBTTtZQUNMLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNoSCxRQUFRLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNwRSxNQUFNLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNwRTtRQUVELGtDQUFrQztRQUNsQyxPQUFPO1lBQ0wsU0FBUyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQ3pDLE9BQU8sRUFBRTtnQkFDUCxRQUFRO2dCQUNSLE1BQU07Z0JBQ04sSUFBSSxFQUFFLFVBQVU7YUFDakI7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBckRGLFVBQVU7Ozs7Ozs7Ozs7SUFLVCxvREFFRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgZmFkZSB9IGZyb20gJy4uL2FuaW1hdGlvbi1wcmVzZXRzL2ZhZGUuYW5pbWF0aW9uLXByZXNldCc7XG5pbXBvcnQgeyBzbGlkZSB9IGZyb20gJy4uL2FuaW1hdGlvbi1wcmVzZXRzL3NsaWRlLmFuaW1hdGlvbi1wcmVzZXQnO1xuaW1wb3J0IHsgTm90aWZpZXJBbmltYXRpb25EYXRhLCBOb3RpZmllckFuaW1hdGlvblByZXNldCwgTm90aWZpZXJBbmltYXRpb25QcmVzZXRLZXlmcmFtZXMgfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItYW5pbWF0aW9uLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWVyLW5vdGlmaWNhdGlvbi5tb2RlbCc7XG5cbi8qKlxuICogTm90aWZpZXIgYW5pbWF0aW9uIHNlcnZpY2VcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5vdGlmaWVyQW5pbWF0aW9uU2VydmljZSB7XG4gIC8qKlxuICAgKiBMaXN0IG9mIGFuaW1hdGlvbiBwcmVzZXRzIChjdXJyZW50bHkgc3RhdGljKVxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBhbmltYXRpb25QcmVzZXRzOiB7XG4gICAgW2FuaW1hdGlvblByZXNldE5hbWU6IHN0cmluZ106IE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYW5pbWF0aW9uUHJlc2V0cyA9IHtcbiAgICAgIGZhZGUsXG4gICAgICBzbGlkZSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbmltYXRpb24gZGF0YVxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBnZW5lcmF0ZXMgYWxsIGRhdGEgdGhlIFdlYiBBbmltYXRpb25zIEFQSSBuZWVkcyB0byBhbmltYXRlIG91ciBub3RpZmljYXRpb24uIFRoZSByZXN1bHQgZGVwZW5kcyBvbiBib3RoIHRoZSBhbmltYXRpb25cbiAgICogZGlyZWN0aW9uIChlaXRoZXIgaW4gb3Igb3V0KSBhcyB3ZWxsIGFzIHRoZSBub3RpZmljYXRpb25zIChhbmQgaXRzIGF0dHJpYnV0ZXMpIGl0c2VsZi5cbiAgICpcbiAgICogQHBhcmFtICAgZGlyZWN0aW9uICAgIEFuaW1hdGlvbiBkaXJlY3Rpb24sIGVpdGhlciBpbiBvciBvdXRcbiAgICogQHBhcmFtICAgbm90aWZpY2F0aW9uIE5vdGlmaWNhdGlvbiB0aGUgYW5pbWF0aW9uIGRhdGEgc2hvdWxkIGJlIGdlbmVyYXRlZCBmb3JcbiAgICogQHJldHVybnMgQW5pbWF0aW9uIGluZm9ybWF0aW9uXG4gICAqL1xuICBwdWJsaWMgZ2V0QW5pbWF0aW9uRGF0YShkaXJlY3Rpb246ICdzaG93JyB8ICdoaWRlJywgbm90aWZpY2F0aW9uOiBOb3RpZmllck5vdGlmaWNhdGlvbik6IE5vdGlmaWVyQW5pbWF0aW9uRGF0YSB7XG4gICAgLy8gR2V0IGFsbCBuZWNlc3NhcnkgYW5pbWF0aW9uIGRhdGFcbiAgICBsZXQga2V5ZnJhbWVzOiBOb3RpZmllckFuaW1hdGlvblByZXNldEtleWZyYW1lcztcbiAgICBsZXQgZHVyYXRpb246IG51bWJlcjtcbiAgICBsZXQgZWFzaW5nOiBzdHJpbmc7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3Nob3cnKSB7XG4gICAgICBrZXlmcmFtZXMgPSB0aGlzLmFuaW1hdGlvblByZXNldHNbbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKS5hbmltYXRpb25zLnNob3cucHJlc2V0XS5zaG93KG5vdGlmaWNhdGlvbik7XG4gICAgICBkdXJhdGlvbiA9IG5vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCkuYW5pbWF0aW9ucy5zaG93LnNwZWVkO1xuICAgICAgZWFzaW5nID0gbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKS5hbmltYXRpb25zLnNob3cuZWFzaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXlmcmFtZXMgPSB0aGlzLmFuaW1hdGlvblByZXNldHNbbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKS5hbmltYXRpb25zLmhpZGUucHJlc2V0XS5oaWRlKG5vdGlmaWNhdGlvbik7XG4gICAgICBkdXJhdGlvbiA9IG5vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCkuYW5pbWF0aW9ucy5oaWRlLnNwZWVkO1xuICAgICAgZWFzaW5nID0gbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKS5hbmltYXRpb25zLmhpZGUuZWFzaW5nO1xuICAgIH1cblxuICAgIC8vIEJ1aWxkIGFuZCByZXR1cm4gYW5pbWF0aW9uIGRhdGFcbiAgICByZXR1cm4ge1xuICAgICAga2V5ZnJhbWVzOiBba2V5ZnJhbWVzLmZyb20sIGtleWZyYW1lcy50b10sXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGZpbGw6ICdmb3J3YXJkcycsIC8vIEtlZXAgdGhlIG5ld2x5IHBhaW50ZWQgc3RhdGUgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBmaW5pc2hlZFxuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG4iXX0=