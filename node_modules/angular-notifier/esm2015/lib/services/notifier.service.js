/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/notifier.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { NotifierConfig } from '../models/notifier-config.model';
import { NotifierConfigToken } from '../notifier.tokens';
import { NotifierQueueService } from './notifier-queue.service';
/**
 * Notifier service
 *
 * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building
 * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into
 * actions, which then get thrown into the action queue - eventually being processed at the right moment.
 */
export class NotifierService {
    /**
     * Constructor
     *
     * @param {?} notifierQueueService Notifier queue service
     * @param {?} config               Notifier configuration, optionally injected as a dependency
     */
    constructor(notifierQueueService, config) {
        this.queueService = notifierQueueService;
        this.config = config;
    }
    /**
     * Get the notifier configuration
     *
     * @return {?} Notifier configuration
     */
    getConfig() {
        return this.config;
    }
    /**
     * API: Show a new notification
     *
     * @param {?} notificationOptions Notification options
     * @return {?}
     */
    show(notificationOptions) {
        this.queueService.push({
            payload: notificationOptions,
            type: 'SHOW',
        });
    }
    /**
     * API: Hide a specific notification, given its ID
     *
     * @param {?} notificationId ID of the notification to hide
     * @return {?}
     */
    hide(notificationId) {
        this.queueService.push({
            payload: notificationId,
            type: 'HIDE',
        });
    }
    /**
     * API: Hide the newest notification
     * @return {?}
     */
    hideNewest() {
        this.queueService.push({
            type: 'HIDE_NEWEST',
        });
    }
    /**
     * API: Hide the oldest notification
     * @return {?}
     */
    hideOldest() {
        this.queueService.push({
            type: 'HIDE_OLDEST',
        });
    }
    /**
     * API: Hide all notifications at once
     * @return {?}
     */
    hideAll() {
        this.queueService.push({
            type: 'HIDE_ALL',
        });
    }
    /**
     * API: Shortcut for showing a new notification
     *
     * @param {?} type             Type of the notification
     * @param {?} message          Message of the notification
     * @param {?=} notificationId
     * @return {?}
     */
    notify(type, message, notificationId) {
        /** @type {?} */
        const notificationOptions = {
            message,
            type,
        };
        if (notificationId !== undefined) {
            notificationOptions.id = notificationId;
        }
        this.show(notificationOptions);
    }
}
NotifierService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NotifierService.ctorParameters = () => [
    { type: NotifierQueueService },
    { type: NotifierConfig, decorators: [{ type: Inject, args: [NotifierConfigToken,] }] }
];
if (false) {
    /**
     * Notifier queue service
     * @type {?}
     * @private
     */
    NotifierService.prototype.queueService;
    /**
     * Notifier configuration
     * @type {?}
     * @private
     */
    NotifierService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItbm90aWZpZXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbm90aWZpZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVqRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7Ozs7Ozs7QUFVaEUsTUFBTSxPQUFPLGVBQWU7Ozs7Ozs7SUFpQjFCLFlBQW1CLG9CQUEwQyxFQUErQixNQUFzQjtRQUNoSCxJQUFJLENBQUMsWUFBWSxHQUFHLG9CQUFvQixDQUFDO1FBQ3pDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Ozs7OztJQU9NLFNBQVM7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7Ozs7OztJQU9NLElBQUksQ0FBQyxtQkFBZ0Q7UUFDMUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7WUFDckIsT0FBTyxFQUFFLG1CQUFtQjtZQUM1QixJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7SUFPTSxJQUFJLENBQUMsY0FBc0I7UUFDaEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7WUFDckIsT0FBTyxFQUFFLGNBQWM7WUFDdkIsSUFBSSxFQUFFLE1BQU07U0FDYixDQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUtNLFVBQVU7UUFDZixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNyQixJQUFJLEVBQUUsYUFBYTtTQUNwQixDQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUtNLFVBQVU7UUFDZixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNyQixJQUFJLEVBQUUsYUFBYTtTQUNwQixDQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUtNLE9BQU87UUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNyQixJQUFJLEVBQUUsVUFBVTtTQUNqQixDQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7Ozs7SUFTTSxNQUFNLENBQUMsSUFBWSxFQUFFLE9BQWUsRUFBRSxjQUF1Qjs7Y0FDNUQsbUJBQW1CLEdBQWdDO1lBQ3ZELE9BQU87WUFDUCxJQUFJO1NBQ0w7UUFDRCxJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUU7WUFDaEMsbUJBQW1CLENBQUMsRUFBRSxHQUFHLGNBQWMsQ0FBQztTQUN6QztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7WUFuR0YsVUFBVTs7OztZQVRGLG9CQUFvQjtZQUhwQixjQUFjLHVCQThCMkMsTUFBTSxTQUFDLG1CQUFtQjs7Ozs7Ozs7SUFiMUYsdUNBQW9EOzs7Ozs7SUFLcEQsaUNBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE5vdGlmaWVyQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWVyLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBOb3RpZmllck5vdGlmaWNhdGlvbk9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyQ29uZmlnVG9rZW4gfSBmcm9tICcuLi9ub3RpZmllci50b2tlbnMnO1xuaW1wb3J0IHsgTm90aWZpZXJRdWV1ZVNlcnZpY2UgfSBmcm9tICcuL25vdGlmaWVyLXF1ZXVlLnNlcnZpY2UnO1xuXG4vKipcbiAqIE5vdGlmaWVyIHNlcnZpY2VcbiAqXG4gKiBUaGlzIHNlcnZpY2UgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBwdWJsaWMgbm90aWZpZXIgQVBJLiBPbmNlIGluamVjdGVkIGludG8gYSBjb21wb25lbnQsIGRpcmVjdGl2ZSwgcGlwZSwgc2VydmljZSwgb3IgYW55IG90aGVyIGJ1aWxkaW5nXG4gKiBibG9jayBvZiBhbiBhcHBsaWNhdGlvbnMsIGl0IGNhbiBiZSB1c2VkIHRvIHNob3cgbmV3IG5vdGlmaWNhdGlvbnMsIGFuZCBoaWRlIGV4aXN0aW5nIG9uZXMuIEludGVybmFsbHksIGl0IHRyYW5zZm9ybXMgQVBJIGNhbGxzIGludG9cbiAqIGFjdGlvbnMsIHdoaWNoIHRoZW4gZ2V0IHRocm93biBpbnRvIHRoZSBhY3Rpb24gcXVldWUgLSBldmVudHVhbGx5IGJlaW5nIHByb2Nlc3NlZCBhdCB0aGUgcmlnaHQgbW9tZW50LlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTm90aWZpZXJTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIE5vdGlmaWVyIHF1ZXVlIHNlcnZpY2VcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgcXVldWVTZXJ2aWNlOiBOb3RpZmllclF1ZXVlU2VydmljZTtcblxuICAvKipcbiAgICogTm90aWZpZXIgY29uZmlndXJhdGlvblxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBjb25maWc6IE5vdGlmaWVyQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0gbm90aWZpZXJRdWV1ZVNlcnZpY2UgTm90aWZpZXIgcXVldWUgc2VydmljZVxuICAgKiBAcGFyYW0gY29uZmlnICAgICAgICAgICAgICAgTm90aWZpZXIgY29uZmlndXJhdGlvbiwgb3B0aW9uYWxseSBpbmplY3RlZCBhcyBhIGRlcGVuZGVuY3lcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihub3RpZmllclF1ZXVlU2VydmljZTogTm90aWZpZXJRdWV1ZVNlcnZpY2UsIEBJbmplY3QoTm90aWZpZXJDb25maWdUb2tlbikgY29uZmlnOiBOb3RpZmllckNvbmZpZykge1xuICAgIHRoaXMucXVldWVTZXJ2aWNlID0gbm90aWZpZXJRdWV1ZVNlcnZpY2U7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBub3RpZmllciBjb25maWd1cmF0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIE5vdGlmaWVyIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIHB1YmxpYyBnZXRDb25maWcoKTogTm90aWZpZXJDb25maWcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBBUEk6IFNob3cgYSBuZXcgbm90aWZpY2F0aW9uXG4gICAqXG4gICAqIEBwYXJhbSBub3RpZmljYXRpb25PcHRpb25zIE5vdGlmaWNhdGlvbiBvcHRpb25zXG4gICAqL1xuICBwdWJsaWMgc2hvdyhub3RpZmljYXRpb25PcHRpb25zOiBOb3RpZmllck5vdGlmaWNhdGlvbk9wdGlvbnMpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXVlU2VydmljZS5wdXNoKHtcbiAgICAgIHBheWxvYWQ6IG5vdGlmaWNhdGlvbk9wdGlvbnMsXG4gICAgICB0eXBlOiAnU0hPVycsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBIaWRlIGEgc3BlY2lmaWMgbm90aWZpY2F0aW9uLCBnaXZlbiBpdHMgSURcbiAgICpcbiAgICogQHBhcmFtIG5vdGlmaWNhdGlvbklkIElEIG9mIHRoZSBub3RpZmljYXRpb24gdG8gaGlkZVxuICAgKi9cbiAgcHVibGljIGhpZGUobm90aWZpY2F0aW9uSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMucXVldWVTZXJ2aWNlLnB1c2goe1xuICAgICAgcGF5bG9hZDogbm90aWZpY2F0aW9uSWQsXG4gICAgICB0eXBlOiAnSElERScsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBIaWRlIHRoZSBuZXdlc3Qgbm90aWZpY2F0aW9uXG4gICAqL1xuICBwdWJsaWMgaGlkZU5ld2VzdCgpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXVlU2VydmljZS5wdXNoKHtcbiAgICAgIHR5cGU6ICdISURFX05FV0VTVCcsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBIaWRlIHRoZSBvbGRlc3Qgbm90aWZpY2F0aW9uXG4gICAqL1xuICBwdWJsaWMgaGlkZU9sZGVzdCgpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXVlU2VydmljZS5wdXNoKHtcbiAgICAgIHR5cGU6ICdISURFX09MREVTVCcsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBIaWRlIGFsbCBub3RpZmljYXRpb25zIGF0IG9uY2VcbiAgICovXG4gIHB1YmxpYyBoaWRlQWxsKCk6IHZvaWQge1xuICAgIHRoaXMucXVldWVTZXJ2aWNlLnB1c2goe1xuICAgICAgdHlwZTogJ0hJREVfQUxMJyxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBUEk6IFNob3J0Y3V0IGZvciBzaG93aW5nIGEgbmV3IG5vdGlmaWNhdGlvblxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSAgICAgICAgICAgICBUeXBlIG9mIHRoZSBub3RpZmljYXRpb25cbiAgICogQHBhcmFtIG1lc3NhZ2UgICAgICAgICAgTWVzc2FnZSBvZiB0aGUgbm90aWZpY2F0aW9uXG4gICAqIEBwYXJhbSBbbm90aWZpY2F0aW9uSWRdIFVuaXF1ZSBJRCBmb3IgdGhlIG5vdGlmaWNhdGlvbiAob3B0aW9uYWwpXG4gICAqL1xuICBwdWJsaWMgbm90aWZ5KHR5cGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCBub3RpZmljYXRpb25JZD86IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbk9wdGlvbnM6IE5vdGlmaWVyTm90aWZpY2F0aW9uT3B0aW9ucyA9IHtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICB0eXBlLFxuICAgIH07XG4gICAgaWYgKG5vdGlmaWNhdGlvbklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vdGlmaWNhdGlvbk9wdGlvbnMuaWQgPSBub3RpZmljYXRpb25JZDtcbiAgICB9XG4gICAgdGhpcy5zaG93KG5vdGlmaWNhdGlvbk9wdGlvbnMpO1xuICB9XG59XG4iXX0=