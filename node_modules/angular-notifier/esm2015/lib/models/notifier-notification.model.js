/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/notifier-notification.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Notification
 *
 * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.
 */
export class NotifierNotification {
    /**
     * Constructor
     *
     * @param {?} options Notifier options
     */
    constructor(options) {
        /**
         * The template to customize
         * the appearance of the notification
         */
        this.template = null;
        Object.assign(this, options);
        // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser
        // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,
        // is not possible due to the action queue concept.
        if (options.id === undefined) {
            this.id = `ID_${new Date().getTime()}`;
        }
    }
}
if (false) {
    /**
     * Unique notification ID, can be set manually to control the notification from outside later on
     * @type {?}
     */
    NotifierNotification.prototype.id;
    /**
     * Notification type, will be used for constructing an appropriate class name
     * @type {?}
     */
    NotifierNotification.prototype.type;
    /**
     * Notification message
     * @type {?}
     */
    NotifierNotification.prototype.message;
    /**
     * The template to customize
     * the appearance of the notification
     * @type {?}
     */
    NotifierNotification.prototype.template;
    /**
     * Component reference of this notification, created and set during creation time
     * @type {?}
     */
    NotifierNotification.prototype.component;
}
/**
 * Notifiction options
 *
 * This interface describes which information are needed to create a new notification, or in other words, which information the external API
 * call must provide.
 * @record
 */
export function NotifierNotificationOptions() { }
if (false) {
    /**
     * Notification ID, optional
     * @type {?|undefined}
     */
    NotifierNotificationOptions.prototype.id;
    /**
     * Notification type
     * @type {?}
     */
    NotifierNotificationOptions.prototype.type;
    /**
     * Notificatin message
     * @type {?}
     */
    NotifierNotificationOptions.prototype.message;
    /**
     * The template to customize
     * the appearance of the notification
     * @type {?|undefined}
     */
    NotifierNotificationOptions.prototype.template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1ub3RpZmllci8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvbm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFTQSxNQUFNLE9BQU8sb0JBQW9COzs7Ozs7SUFnQy9CLFlBQW1CLE9BQW9DOzs7OztRQVpoRCxhQUFRLEdBQXNCLElBQUksQ0FBQztRQWF4QyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU3QixnSUFBZ0k7UUFDaEksbUlBQW1JO1FBQ25JLG1EQUFtRDtRQUNuRCxJQUFJLE9BQU8sQ0FBQyxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQzVCLElBQUksQ0FBQyxFQUFFLEdBQUcsTUFBTSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7U0FDeEM7SUFDSCxDQUFDO0NBQ0Y7Ozs7OztJQXRDQyxrQ0FBa0I7Ozs7O0lBS2xCLG9DQUFvQjs7Ozs7SUFLcEIsdUNBQXVCOzs7Ozs7SUFNdkIsd0NBQTBDOzs7OztJQUsxQyx5Q0FBZ0Q7Ozs7Ozs7OztBQXlCbEQsaURBcUJDOzs7Ozs7SUFqQkMseUNBQVk7Ozs7O0lBS1osMkNBQWE7Ozs7O0lBS2IsOENBQWdCOzs7Ozs7SUFNaEIsK0NBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTm90aWZpZXJOb3RpZmljYXRpb25Db21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL25vdGlmaWVyLW5vdGlmaWNhdGlvbi5jb21wb25lbnQnO1xuXG4vKipcbiAqIE5vdGlmaWNhdGlvblxuICpcbiAqIFRoaXMgY2xhc3MgZGVzY3JpYmVzIHRoZSBzdHJ1Y3R1cmUgb2YgYSBub3RpZmljdGlvbiwgaW5jbHVkaW5nIGFsbCBpbmZvcm1hdGlvbiBpdCBuZWVkcyB0byBsaXZlLCBhbmQgZXZlcnlvbmUgZWxzZSBuZWVkcyB0byB3b3JrIHdpdGggaXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb3RpZmllck5vdGlmaWNhdGlvbiB7XG4gIC8qKlxuICAgKiBVbmlxdWUgbm90aWZpY2F0aW9uIElELCBjYW4gYmUgc2V0IG1hbnVhbGx5IHRvIGNvbnRyb2wgdGhlIG5vdGlmaWNhdGlvbiBmcm9tIG91dHNpZGUgbGF0ZXIgb25cbiAgICovXG4gIHB1YmxpYyBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOb3RpZmljYXRpb24gdHlwZSwgd2lsbCBiZSB1c2VkIGZvciBjb25zdHJ1Y3RpbmcgYW4gYXBwcm9wcmlhdGUgY2xhc3MgbmFtZVxuICAgKi9cbiAgcHVibGljIHR5cGU6IHN0cmluZztcblxuICAvKipcbiAgICogTm90aWZpY2F0aW9uIG1lc3NhZ2VcbiAgICovXG4gIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byBjdXN0b21pemVcbiAgICogdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIG5vdGlmaWNhdGlvblxuICAgKi9cbiAgcHVibGljIHRlbXBsYXRlPzogVGVtcGxhdGVSZWY8YW55PiA9IG51bGw7XG5cbiAgLyoqXG4gICAqIENvbXBvbmVudCByZWZlcmVuY2Ugb2YgdGhpcyBub3RpZmljYXRpb24sIGNyZWF0ZWQgYW5kIHNldCBkdXJpbmcgY3JlYXRpb24gdGltZVxuICAgKi9cbiAgcHVibGljIGNvbXBvbmVudDogTm90aWZpZXJOb3RpZmljYXRpb25Db21wb25lbnQ7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIE5vdGlmaWVyIG9wdGlvbnNcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihvcHRpb25zOiBOb3RpZmllck5vdGlmaWNhdGlvbk9wdGlvbnMpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgLy8gSWYgbm90IHNldCBtYW51YWxseSwgd2UgaGF2ZSB0byBjcmVhdGUgYSB1bmlxdWUgbm90aWZpY2F0aW9uIElEIGJ5IG91cnNlbHZlcy4gVGhlIElEIGdlbmVyYXRpb24gcmVsaWVzIG9uIHRoZSBjdXJyZW50IGJyb3dzZXJcbiAgICAvLyBkYXRldGltZSBpbiBtcywgaW4gcHJhdGljdWxhciB0aGUgbW9tZW50IHRoaXMgbm90aWZpY2F0aW9uIGdldHMgY29uc3RydWN0ZWQuIENvbmN1cnJlbmN5LCBhbmQgdGh1cyB0d28gSURzIGJlaW5nIHRoZSBleGFjdCBzYW1lLFxuICAgIC8vIGlzIG5vdCBwb3NzaWJsZSBkdWUgdG8gdGhlIGFjdGlvbiBxdWV1ZSBjb25jZXB0LlxuICAgIGlmIChvcHRpb25zLmlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaWQgPSBgSURfJHtuZXcgRGF0ZSgpLmdldFRpbWUoKX1gO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIE5vdGlmaWN0aW9uIG9wdGlvbnNcbiAqXG4gKiBUaGlzIGludGVyZmFjZSBkZXNjcmliZXMgd2hpY2ggaW5mb3JtYXRpb24gYXJlIG5lZWRlZCB0byBjcmVhdGUgYSBuZXcgbm90aWZpY2F0aW9uLCBvciBpbiBvdGhlciB3b3Jkcywgd2hpY2ggaW5mb3JtYXRpb24gdGhlIGV4dGVybmFsIEFQSVxuICogY2FsbCBtdXN0IHByb3ZpZGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTm90aWZpZXJOb3RpZmljYXRpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIE5vdGlmaWNhdGlvbiBJRCwgb3B0aW9uYWxcbiAgICovXG4gIGlkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOb3RpZmljYXRpb24gdHlwZVxuICAgKi9cbiAgdHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOb3RpZmljYXRpbiBtZXNzYWdlXG4gICAqL1xuICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byBjdXN0b21pemVcbiAgICogdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIG5vdGlmaWNhdGlvblxuICAgKi9cbiAgdGVtcGxhdGU/OiBUZW1wbGF0ZVJlZjxhbnk+O1xufVxuIl19