/**
 * @fileoverview added by tsickle
 * Generated from: lib/notifier.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { NotifierContainerComponent } from './components/notifier-container.component';
import { NotifierNotificationComponent } from './components/notifier-notification.component';
import { NotifierConfig } from './models/notifier-config.model';
import { NotifierConfigToken, NotifierOptionsToken } from './notifier.tokens';
import { NotifierService } from './services/notifier.service';
import { NotifierAnimationService } from './services/notifier-animation.service';
import { NotifierQueueService } from './services/notifier-queue.service';
/**
 * Factory for a notifier configuration with custom options
 *
 * Sidenote:
 * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.
 *
 * @param {?} options - Custom notifier options
 * @return {?} - Notifier configuration as result
 */
export function notifierCustomConfigFactory(options) {
    return new NotifierConfig(options);
}
/**
 * Factory for a notifier configuration with default options
 *
 * Sidenote:
 * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.
 *
 * @return {?} - Notifier configuration as result
 */
export function notifierDefaultConfigFactory() {
    return new NotifierConfig({});
}
/**
 * Notifier module
 */
export class NotifierModule {
    /**
     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options
     *
     * @param {?=} options
     * @return {?} - Notifier module with custom providers
     */
    static withConfig(options = {}) {
        return {
            ngModule: NotifierModule,
            providers: [
                // Provide the options itself upfront (as we need to inject them as dependencies -- see below)
                {
                    provide: NotifierOptionsToken,
                    useValue: options,
                },
                // Provide a custom notifier configuration, based on the given notifier options
                {
                    deps: [NotifierOptionsToken],
                    provide: NotifierConfigToken,
                    useFactory: notifierCustomConfigFactory,
                },
            ],
        };
    }
}
NotifierModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NotifierContainerComponent, NotifierNotificationComponent],
                exports: [NotifierContainerComponent],
                imports: [CommonModule],
                providers: [
                    NotifierAnimationService,
                    NotifierService,
                    NotifierQueueService,
                    // Provide the default notifier configuration if just the module is imported
                    {
                        provide: NotifierConfigToken,
                        useFactory: notifierDefaultConfigFactory,
                    },
                ],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1ub3RpZmllci8iLCJzb3VyY2VzIjpbImxpYi9ub3RpZmllci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDdkYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDN0YsT0FBTyxFQUFFLGNBQWMsRUFBbUIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDakYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7Ozs7Ozs7Ozs7QUFXekUsTUFBTSxVQUFVLDJCQUEyQixDQUFDLE9BQXdCO0lBQ2xFLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckMsQ0FBQzs7Ozs7Ozs7O0FBVUQsTUFBTSxVQUFVLDRCQUE0QjtJQUMxQyxPQUFPLElBQUksY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7Ozs7QUFxQkQsTUFBTSxPQUFPLGNBQWM7Ozs7Ozs7SUFPbEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUEyQixFQUFFO1FBQ3BELE9BQU87WUFDTCxRQUFRLEVBQUUsY0FBYztZQUN4QixTQUFTLEVBQUU7Z0JBQ1QsOEZBQThGO2dCQUM5RjtvQkFDRSxPQUFPLEVBQUUsb0JBQW9CO29CQUM3QixRQUFRLEVBQUUsT0FBTztpQkFDbEI7Z0JBRUQsK0VBQStFO2dCQUMvRTtvQkFDRSxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDNUIsT0FBTyxFQUFFLG1CQUFtQjtvQkFDNUIsVUFBVSxFQUFFLDJCQUEyQjtpQkFDeEM7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUF6Q0YsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLDBCQUEwQixFQUFFLDZCQUE2QixDQUFDO2dCQUN6RSxPQUFPLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztnQkFDckMsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO2dCQUN2QixTQUFTLEVBQUU7b0JBQ1Qsd0JBQXdCO29CQUN4QixlQUFlO29CQUNmLG9CQUFvQjtvQkFFcEIsNEVBQTRFO29CQUM1RTt3QkFDRSxPQUFPLEVBQUUsbUJBQW1CO3dCQUM1QixVQUFVLEVBQUUsNEJBQTRCO3FCQUN6QztpQkFDRjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE5vdGlmaWVyQ29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL25vdGlmaWVyLWNvbnRhaW5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTm90aWZpZXJOb3RpZmljYXRpb25Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbm90aWZpZXItbm90aWZpY2F0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOb3RpZmllckNvbmZpZywgTm90aWZpZXJPcHRpb25zIH0gZnJvbSAnLi9tb2RlbHMvbm90aWZpZXItY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyQ29uZmlnVG9rZW4sIE5vdGlmaWVyT3B0aW9uc1Rva2VuIH0gZnJvbSAnLi9ub3RpZmllci50b2tlbnMnO1xuaW1wb3J0IHsgTm90aWZpZXJTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9ub3RpZmllci5zZXJ2aWNlJztcbmltcG9ydCB7IE5vdGlmaWVyQW5pbWF0aW9uU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvbm90aWZpZXItYW5pbWF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm90aWZpZXJRdWV1ZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL25vdGlmaWVyLXF1ZXVlLnNlcnZpY2UnO1xuXG4vKipcbiAqIEZhY3RvcnkgZm9yIGEgbm90aWZpZXIgY29uZmlndXJhdGlvbiB3aXRoIGN1c3RvbSBvcHRpb25zXG4gKlxuICogU2lkZW5vdGU6XG4gKiBSZXF1aXJlZCBhcyBBbmd1bGFyIEFvVCBjb21waWxhdGlvbiBjYW5ub3QgaGFuZGxlIGR5bmFtaWMgZnVuY3Rpb25zOyBzZWUgPGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzExMjYyPi5cbiAqXG4gKiBAcGFyYW0gICBvcHRpb25zIC0gQ3VzdG9tIG5vdGlmaWVyIG9wdGlvbnNcbiAqIEByZXR1cm5zIC0gTm90aWZpZXIgY29uZmlndXJhdGlvbiBhcyByZXN1bHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vdGlmaWVyQ3VzdG9tQ29uZmlnRmFjdG9yeShvcHRpb25zOiBOb3RpZmllck9wdGlvbnMpOiBOb3RpZmllckNvbmZpZyB7XG4gIHJldHVybiBuZXcgTm90aWZpZXJDb25maWcob3B0aW9ucyk7XG59XG5cbi8qKlxuICogRmFjdG9yeSBmb3IgYSBub3RpZmllciBjb25maWd1cmF0aW9uIHdpdGggZGVmYXVsdCBvcHRpb25zXG4gKlxuICogU2lkZW5vdGU6XG4gKiBSZXF1aXJlZCBhcyBBbmd1bGFyIEFvVCBjb21waWxhdGlvbiBjYW5ub3QgaGFuZGxlIGR5bmFtaWMgZnVuY3Rpb25zOyBzZWUgPGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzExMjYyPi5cbiAqXG4gKiBAcmV0dXJucyAtIE5vdGlmaWVyIGNvbmZpZ3VyYXRpb24gYXMgcmVzdWx0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3RpZmllckRlZmF1bHRDb25maWdGYWN0b3J5KCk6IE5vdGlmaWVyQ29uZmlnIHtcbiAgcmV0dXJuIG5ldyBOb3RpZmllckNvbmZpZyh7fSk7XG59XG5cbi8qKlxuICogTm90aWZpZXIgbW9kdWxlXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05vdGlmaWVyQ29udGFpbmVyQ29tcG9uZW50LCBOb3RpZmllck5vdGlmaWNhdGlvbkNvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtOb3RpZmllckNvbnRhaW5lckNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBwcm92aWRlcnM6IFtcbiAgICBOb3RpZmllckFuaW1hdGlvblNlcnZpY2UsXG4gICAgTm90aWZpZXJTZXJ2aWNlLFxuICAgIE5vdGlmaWVyUXVldWVTZXJ2aWNlLFxuXG4gICAgLy8gUHJvdmlkZSB0aGUgZGVmYXVsdCBub3RpZmllciBjb25maWd1cmF0aW9uIGlmIGp1c3QgdGhlIG1vZHVsZSBpcyBpbXBvcnRlZFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5vdGlmaWVyQ29uZmlnVG9rZW4sXG4gICAgICB1c2VGYWN0b3J5OiBub3RpZmllckRlZmF1bHRDb25maWdGYWN0b3J5LFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIE5vdGlmaWVyTW9kdWxlIHtcbiAgLyoqXG4gICAqIFNldHVwIHRoZSBub3RpZmllciBtb2R1bGUgd2l0aCBjdXN0b20gcHJvdmlkZXJzLCBpbiB0aGlzIGNhc2Ugd2l0aCBhIGN1c3RvbSBjb25maWd1cmF0aW9uIGJhc2VkIG9uIHRoZSBnaXZuZSBvcHRpb25zXG4gICAqXG4gICAqIEBwYXJhbSAgIFtvcHRpb25zPXt9XSAtIEN1c3RvbSBub3RpZmllciBvcHRpb25zXG4gICAqIEByZXR1cm5zIC0gTm90aWZpZXIgbW9kdWxlIHdpdGggY3VzdG9tIHByb3ZpZGVyc1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyB3aXRoQ29uZmlnKG9wdGlvbnM6IE5vdGlmaWVyT3B0aW9ucyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOb3RpZmllck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAvLyBQcm92aWRlIHRoZSBvcHRpb25zIGl0c2VsZiB1cGZyb250IChhcyB3ZSBuZWVkIHRvIGluamVjdCB0aGVtIGFzIGRlcGVuZGVuY2llcyAtLSBzZWUgYmVsb3cpXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBOb3RpZmllck9wdGlvbnNUb2tlbixcbiAgICAgICAgICB1c2VWYWx1ZTogb3B0aW9ucyxcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBQcm92aWRlIGEgY3VzdG9tIG5vdGlmaWVyIGNvbmZpZ3VyYXRpb24sIGJhc2VkIG9uIHRoZSBnaXZlbiBub3RpZmllciBvcHRpb25zXG4gICAgICAgIHtcbiAgICAgICAgICBkZXBzOiBbTm90aWZpZXJPcHRpb25zVG9rZW5dLFxuICAgICAgICAgIHByb3ZpZGU6IE5vdGlmaWVyQ29uZmlnVG9rZW4sXG4gICAgICAgICAgdXNlRmFjdG9yeTogbm90aWZpZXJDdXN0b21Db25maWdGYWN0b3J5LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG4iXX0=