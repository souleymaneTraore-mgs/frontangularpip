/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/notifier-timer.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Notifier timer service
 *
 * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a
 * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.
 */
var NotifierTimerService = /** @class */ (function () {
    /**
     * Constructor
     */
    function NotifierTimerService() {
        this.now = 0;
        this.remaining = 0;
    }
    /**
     * Start (or resume) the timer
     *
     * @param   duration Timer duration, in ms
     * @returns          Promise, resolved once the timer finishes
     */
    /**
     * Start (or resume) the timer
     *
     * @param {?} duration Timer duration, in ms
     * @return {?} Promise, resolved once the timer finishes
     */
    NotifierTimerService.prototype.start = /**
     * Start (or resume) the timer
     *
     * @param {?} duration Timer duration, in ms
     * @return {?} Promise, resolved once the timer finishes
     */
    function (duration) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            // For the first run ...
            _this.remaining = duration;
            // Setup, then start the timer
            _this.finishPromiseResolver = resolve;
            _this.continue();
        }));
    };
    /**
     * Pause the timer
     */
    /**
     * Pause the timer
     * @return {?}
     */
    NotifierTimerService.prototype.pause = /**
     * Pause the timer
     * @return {?}
     */
    function () {
        clearTimeout(this.timerId);
        this.remaining -= new Date().getTime() - this.now;
    };
    /**
     * Continue the timer
     */
    /**
     * Continue the timer
     * @return {?}
     */
    NotifierTimerService.prototype.continue = /**
     * Continue the timer
     * @return {?}
     */
    function () {
        var _this = this;
        this.now = new Date().getTime();
        this.timerId = window.setTimeout((/**
         * @return {?}
         */
        function () {
            _this.finish();
        }), this.remaining);
    };
    /**
     * Stop the timer
     */
    /**
     * Stop the timer
     * @return {?}
     */
    NotifierTimerService.prototype.stop = /**
     * Stop the timer
     * @return {?}
     */
    function () {
        clearTimeout(this.timerId);
        this.remaining = 0;
    };
    /**
     * Finish up the timeout by resolving the timer promise
     */
    /**
     * Finish up the timeout by resolving the timer promise
     * @private
     * @return {?}
     */
    NotifierTimerService.prototype.finish = /**
     * Finish up the timeout by resolving the timer promise
     * @private
     * @return {?}
     */
    function () {
        this.finishPromiseResolver();
    };
    NotifierTimerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NotifierTimerService.ctorParameters = function () { return []; };
    return NotifierTimerService;
}());
export { NotifierTimerService };
if (false) {
    /**
     * Timestamp (in ms), created in the moment the timer starts
     * @type {?}
     * @private
     */
    NotifierTimerService.prototype.now;
    /**
     * Remaining time (in ms)
     * @type {?}
     * @private
     */
    NotifierTimerService.prototype.remaining;
    /**
     * Timeout ID, used for clearing the timeout later on
     * @type {?}
     * @private
     */
    NotifierTimerService.prototype.timerId;
    /**
     * Promise resolve function, eventually getting called once the timer finishes
     * @type {?}
     * @private
     */
    NotifierTimerService.prototype.finishPromiseResolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItdGltZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItbm90aWZpZXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbm90aWZpZXItdGltZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7QUFRM0M7SUFzQkU7O09BRUc7SUFDSDtRQUNFLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7OztPQUtHOzs7Ozs7O0lBQ0ksb0NBQUs7Ozs7OztJQUFaLFVBQWEsUUFBZ0I7UUFBN0IsaUJBU0M7UUFSQyxPQUFPLElBQUksT0FBTzs7OztRQUFPLFVBQUMsT0FBbUI7WUFDM0Msd0JBQXdCO1lBQ3hCLEtBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBRTFCLDhCQUE4QjtZQUM5QixLQUFJLENBQUMscUJBQXFCLEdBQUcsT0FBTyxDQUFDO1lBQ3JDLEtBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsQixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSSxvQ0FBSzs7OztJQUFaO1FBQ0UsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNwRCxDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0ksdUNBQVE7Ozs7SUFBZjtRQUFBLGlCQUtDO1FBSkMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVU7OztRQUFDO1lBQy9CLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQixDQUFDLEdBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSSxtQ0FBSTs7OztJQUFYO1FBQ0UsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7Ozs7OztJQUNLLHFDQUFNOzs7OztJQUFkO1FBQ0UsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDL0IsQ0FBQzs7Z0JBOUVGLFVBQVU7Ozs7SUErRVgsMkJBQUM7Q0FBQSxBQS9FRCxJQStFQztTQTlFWSxvQkFBb0I7Ozs7Ozs7SUFJL0IsbUNBQW9COzs7Ozs7SUFLcEIseUNBQTBCOzs7Ozs7SUFLMUIsdUNBQXdCOzs7Ozs7SUFLeEIscURBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIE5vdGlmaWVyIHRpbWVyIHNlcnZpY2VcbiAqXG4gKiBUaGlzIHNlcnZpY2UgYWN0cyBhcyBhIHRpbWVyLCBuZWVkZWQgZHVlIHRvIHRoZSBzdGlsbCByYXRoZXIgbGltaXRlZCBzZXRUaW1lb3V0IEphdmFTY3JpcHQgQVBJLiBUaGUgdGltZXIgc2VydmljZSBjYW4gc3RhcnQgYW5kIHN0b3AgYVxuICogdGltZXIuIEZ1cnRoZXJtb3JlLCBpdCBjYW4gYWxzbyBwYXVzZSB0aGUgdGltZXIgYXQgYW55IHRpbWUsIGFuZCByZXN1bWUgbGF0ZXIgb24uIFRoZSB0aW1lciBBUEkgd29ya2QgcHJvbWlzZS1iYXNlZC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5vdGlmaWVyVGltZXJTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIFRpbWVzdGFtcCAoaW4gbXMpLCBjcmVhdGVkIGluIHRoZSBtb21lbnQgdGhlIHRpbWVyIHN0YXJ0c1xuICAgKi9cbiAgcHJpdmF0ZSBub3c6IG51bWJlcjtcblxuICAvKipcbiAgICogUmVtYWluaW5nIHRpbWUgKGluIG1zKVxuICAgKi9cbiAgcHJpdmF0ZSByZW1haW5pbmc6IG51bWJlcjtcblxuICAvKipcbiAgICogVGltZW91dCBJRCwgdXNlZCBmb3IgY2xlYXJpbmcgdGhlIHRpbWVvdXQgbGF0ZXIgb25cbiAgICovXG4gIHByaXZhdGUgdGltZXJJZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBQcm9taXNlIHJlc29sdmUgZnVuY3Rpb24sIGV2ZW50dWFsbHkgZ2V0dGluZyBjYWxsZWQgb25jZSB0aGUgdGltZXIgZmluaXNoZXNcbiAgICovXG4gIHByaXZhdGUgZmluaXNoUHJvbWlzZVJlc29sdmVyOiAoKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubm93ID0gMDtcbiAgICB0aGlzLnJlbWFpbmluZyA9IDA7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgKG9yIHJlc3VtZSkgdGhlIHRpbWVyXG4gICAqXG4gICAqIEBwYXJhbSAgIGR1cmF0aW9uIFRpbWVyIGR1cmF0aW9uLCBpbiBtc1xuICAgKiBAcmV0dXJucyAgICAgICAgICBQcm9taXNlLCByZXNvbHZlZCBvbmNlIHRoZSB0aW1lciBmaW5pc2hlc1xuICAgKi9cbiAgcHVibGljIHN0YXJ0KGR1cmF0aW9uOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmU6ICgpID0+IHZvaWQpID0+IHtcbiAgICAgIC8vIEZvciB0aGUgZmlyc3QgcnVuIC4uLlxuICAgICAgdGhpcy5yZW1haW5pbmcgPSBkdXJhdGlvbjtcblxuICAgICAgLy8gU2V0dXAsIHRoZW4gc3RhcnQgdGhlIHRpbWVyXG4gICAgICB0aGlzLmZpbmlzaFByb21pc2VSZXNvbHZlciA9IHJlc29sdmU7XG4gICAgICB0aGlzLmNvbnRpbnVlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUGF1c2UgdGhlIHRpbWVyXG4gICAqL1xuICBwdWJsaWMgcGF1c2UoKTogdm9pZCB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJJZCk7XG4gICAgdGhpcy5yZW1haW5pbmcgLT0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLm5vdztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb250aW51ZSB0aGUgdGltZXJcbiAgICovXG4gIHB1YmxpYyBjb250aW51ZSgpOiB2b2lkIHtcbiAgICB0aGlzLm5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHRoaXMudGltZXJJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZmluaXNoKCk7XG4gICAgfSwgdGhpcy5yZW1haW5pbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgdGhlIHRpbWVyXG4gICAqL1xuICBwdWJsaWMgc3RvcCgpOiB2b2lkIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcklkKTtcbiAgICB0aGlzLnJlbWFpbmluZyA9IDA7XG4gIH1cblxuICAvKipcbiAgICogRmluaXNoIHVwIHRoZSB0aW1lb3V0IGJ5IHJlc29sdmluZyB0aGUgdGltZXIgcHJvbWlzZVxuICAgKi9cbiAgcHJpdmF0ZSBmaW5pc2goKTogdm9pZCB7XG4gICAgdGhpcy5maW5pc2hQcm9taXNlUmVzb2x2ZXIoKTtcbiAgfVxufVxuIl19