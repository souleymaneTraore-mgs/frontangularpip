/**
 * @fileoverview added by tsickle
 * Generated from: lib/notifier.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { NotifierContainerComponent } from './components/notifier-container.component';
import { NotifierNotificationComponent } from './components/notifier-notification.component';
import { NotifierConfig } from './models/notifier-config.model';
import { NotifierConfigToken, NotifierOptionsToken } from './notifier.tokens';
import { NotifierService } from './services/notifier.service';
import { NotifierAnimationService } from './services/notifier-animation.service';
import { NotifierQueueService } from './services/notifier-queue.service';
/**
 * Factory for a notifier configuration with custom options
 *
 * Sidenote:
 * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.
 *
 * @param {?} options - Custom notifier options
 * @return {?} - Notifier configuration as result
 */
export function notifierCustomConfigFactory(options) {
    return new NotifierConfig(options);
}
/**
 * Factory for a notifier configuration with default options
 *
 * Sidenote:
 * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.
 *
 * @return {?} - Notifier configuration as result
 */
export function notifierDefaultConfigFactory() {
    return new NotifierConfig({});
}
/**
 * Notifier module
 */
var NotifierModule = /** @class */ (function () {
    function NotifierModule() {
    }
    /**
     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options
     *
     * @param   [options={}] - Custom notifier options
     * @returns - Notifier module with custom providers
     */
    /**
     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options
     *
     * @param {?=} options
     * @return {?} - Notifier module with custom providers
     */
    NotifierModule.withConfig = /**
     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options
     *
     * @param {?=} options
     * @return {?} - Notifier module with custom providers
     */
    function (options) {
        if (options === void 0) { options = {}; }
        return {
            ngModule: NotifierModule,
            providers: [
                // Provide the options itself upfront (as we need to inject them as dependencies -- see below)
                {
                    provide: NotifierOptionsToken,
                    useValue: options,
                },
                // Provide a custom notifier configuration, based on the given notifier options
                {
                    deps: [NotifierOptionsToken],
                    provide: NotifierConfigToken,
                    useFactory: notifierCustomConfigFactory,
                },
            ],
        };
    };
    NotifierModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NotifierContainerComponent, NotifierNotificationComponent],
                    exports: [NotifierContainerComponent],
                    imports: [CommonModule],
                    providers: [
                        NotifierAnimationService,
                        NotifierService,
                        NotifierQueueService,
                        // Provide the default notifier configuration if just the module is imported
                        {
                            provide: NotifierConfigToken,
                            useFactory: notifierDefaultConfigFactory,
                        },
                    ],
                },] }
    ];
    return NotifierModule;
}());
export { NotifierModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1ub3RpZmllci8iLCJzb3VyY2VzIjpbImxpYi9ub3RpZmllci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDdkYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDN0YsT0FBTyxFQUFFLGNBQWMsRUFBbUIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDakYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7Ozs7Ozs7Ozs7QUFXekUsTUFBTSxVQUFVLDJCQUEyQixDQUFDLE9BQXdCO0lBQ2xFLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckMsQ0FBQzs7Ozs7Ozs7O0FBVUQsTUFBTSxVQUFVLDRCQUE0QjtJQUMxQyxPQUFPLElBQUksY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7Ozs7QUFLRDtJQUFBO0lBMENBLENBQUM7SUF6QkM7Ozs7O09BS0c7Ozs7Ozs7SUFDVyx5QkFBVTs7Ozs7O0lBQXhCLFVBQXlCLE9BQTZCO1FBQTdCLHdCQUFBLEVBQUEsWUFBNkI7UUFDcEQsT0FBTztZQUNMLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFNBQVMsRUFBRTtnQkFDVCw4RkFBOEY7Z0JBQzlGO29CQUNFLE9BQU8sRUFBRSxvQkFBb0I7b0JBQzdCLFFBQVEsRUFBRSxPQUFPO2lCQUNsQjtnQkFFRCwrRUFBK0U7Z0JBQy9FO29CQUNFLElBQUksRUFBRSxDQUFDLG9CQUFvQixDQUFDO29CQUM1QixPQUFPLEVBQUUsbUJBQW1CO29CQUM1QixVQUFVLEVBQUUsMkJBQTJCO2lCQUN4QzthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQXpDRixRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsMEJBQTBCLEVBQUUsNkJBQTZCLENBQUM7b0JBQ3pFLE9BQU8sRUFBRSxDQUFDLDBCQUEwQixDQUFDO29CQUNyQyxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7b0JBQ3ZCLFNBQVMsRUFBRTt3QkFDVCx3QkFBd0I7d0JBQ3hCLGVBQWU7d0JBQ2Ysb0JBQW9CO3dCQUVwQiw0RUFBNEU7d0JBQzVFOzRCQUNFLE9BQU8sRUFBRSxtQkFBbUI7NEJBQzVCLFVBQVUsRUFBRSw0QkFBNEI7eUJBQ3pDO3FCQUNGO2lCQUNGOztJQTJCRCxxQkFBQztDQUFBLEFBMUNELElBMENDO1NBMUJZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTm90aWZpZXJDb250YWluZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbm90aWZpZXItY29udGFpbmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOb3RpZmllck5vdGlmaWNhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9ub3RpZmllci1ub3RpZmljYXRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IE5vdGlmaWVyQ29uZmlnLCBOb3RpZmllck9wdGlvbnMgfSBmcm9tICcuL21vZGVscy9ub3RpZmllci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJDb25maWdUb2tlbiwgTm90aWZpZXJPcHRpb25zVG9rZW4gfSBmcm9tICcuL25vdGlmaWVyLnRva2Vucyc7XG5pbXBvcnQgeyBOb3RpZmllclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL25vdGlmaWVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm90aWZpZXJBbmltYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9ub3RpZmllci1hbmltYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZmllclF1ZXVlU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvbm90aWZpZXItcXVldWUuc2VydmljZSc7XG5cbi8qKlxuICogRmFjdG9yeSBmb3IgYSBub3RpZmllciBjb25maWd1cmF0aW9uIHdpdGggY3VzdG9tIG9wdGlvbnNcbiAqXG4gKiBTaWRlbm90ZTpcbiAqIFJlcXVpcmVkIGFzIEFuZ3VsYXIgQW9UIGNvbXBpbGF0aW9uIGNhbm5vdCBoYW5kbGUgZHluYW1pYyBmdW5jdGlvbnM7IHNlZSA8aHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTEyNjI+LlxuICpcbiAqIEBwYXJhbSAgIG9wdGlvbnMgLSBDdXN0b20gbm90aWZpZXIgb3B0aW9uc1xuICogQHJldHVybnMgLSBOb3RpZmllciBjb25maWd1cmF0aW9uIGFzIHJlc3VsdFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm90aWZpZXJDdXN0b21Db25maWdGYWN0b3J5KG9wdGlvbnM6IE5vdGlmaWVyT3B0aW9ucyk6IE5vdGlmaWVyQ29uZmlnIHtcbiAgcmV0dXJuIG5ldyBOb3RpZmllckNvbmZpZyhvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBGYWN0b3J5IGZvciBhIG5vdGlmaWVyIGNvbmZpZ3VyYXRpb24gd2l0aCBkZWZhdWx0IG9wdGlvbnNcbiAqXG4gKiBTaWRlbm90ZTpcbiAqIFJlcXVpcmVkIGFzIEFuZ3VsYXIgQW9UIGNvbXBpbGF0aW9uIGNhbm5vdCBoYW5kbGUgZHluYW1pYyBmdW5jdGlvbnM7IHNlZSA8aHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTEyNjI+LlxuICpcbiAqIEByZXR1cm5zIC0gTm90aWZpZXIgY29uZmlndXJhdGlvbiBhcyByZXN1bHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vdGlmaWVyRGVmYXVsdENvbmZpZ0ZhY3RvcnkoKTogTm90aWZpZXJDb25maWcge1xuICByZXR1cm4gbmV3IE5vdGlmaWVyQ29uZmlnKHt9KTtcbn1cblxuLyoqXG4gKiBOb3RpZmllciBtb2R1bGVcbiAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTm90aWZpZXJDb250YWluZXJDb21wb25lbnQsIE5vdGlmaWVyTm90aWZpY2F0aW9uQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW05vdGlmaWVyQ29udGFpbmVyQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIHByb3ZpZGVyczogW1xuICAgIE5vdGlmaWVyQW5pbWF0aW9uU2VydmljZSxcbiAgICBOb3RpZmllclNlcnZpY2UsXG4gICAgTm90aWZpZXJRdWV1ZVNlcnZpY2UsXG5cbiAgICAvLyBQcm92aWRlIHRoZSBkZWZhdWx0IG5vdGlmaWVyIGNvbmZpZ3VyYXRpb24gaWYganVzdCB0aGUgbW9kdWxlIGlzIGltcG9ydGVkXG4gICAge1xuICAgICAgcHJvdmlkZTogTm90aWZpZXJDb25maWdUb2tlbixcbiAgICAgIHVzZUZhY3Rvcnk6IG5vdGlmaWVyRGVmYXVsdENvbmZpZ0ZhY3RvcnksXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgTm90aWZpZXJNb2R1bGUge1xuICAvKipcbiAgICogU2V0dXAgdGhlIG5vdGlmaWVyIG1vZHVsZSB3aXRoIGN1c3RvbSBwcm92aWRlcnMsIGluIHRoaXMgY2FzZSB3aXRoIGEgY3VzdG9tIGNvbmZpZ3VyYXRpb24gYmFzZWQgb24gdGhlIGdpdm5lIG9wdGlvbnNcbiAgICpcbiAgICogQHBhcmFtICAgW29wdGlvbnM9e31dIC0gQ3VzdG9tIG5vdGlmaWVyIG9wdGlvbnNcbiAgICogQHJldHVybnMgLSBOb3RpZmllciBtb2R1bGUgd2l0aCBjdXN0b20gcHJvdmlkZXJzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHdpdGhDb25maWcob3B0aW9uczogTm90aWZpZXJPcHRpb25zID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5vdGlmaWVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIC8vIFByb3ZpZGUgdGhlIG9wdGlvbnMgaXRzZWxmIHVwZnJvbnQgKGFzIHdlIG5lZWQgdG8gaW5qZWN0IHRoZW0gYXMgZGVwZW5kZW5jaWVzIC0tIHNlZSBiZWxvdylcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5vdGlmaWVyT3B0aW9uc1Rva2VuLFxuICAgICAgICAgIHVzZVZhbHVlOiBvcHRpb25zLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIFByb3ZpZGUgYSBjdXN0b20gbm90aWZpZXIgY29uZmlndXJhdGlvbiwgYmFzZWQgb24gdGhlIGdpdmVuIG5vdGlmaWVyIG9wdGlvbnNcbiAgICAgICAge1xuICAgICAgICAgIGRlcHM6IFtOb3RpZmllck9wdGlvbnNUb2tlbl0sXG4gICAgICAgICAgcHJvdmlkZTogTm90aWZpZXJDb25maWdUb2tlbixcbiAgICAgICAgICB1c2VGYWN0b3J5OiBub3RpZmllckN1c3RvbUNvbmZpZ0ZhY3RvcnksXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==