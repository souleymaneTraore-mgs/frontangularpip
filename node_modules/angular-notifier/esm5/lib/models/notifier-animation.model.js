/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/notifier-animation.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Notifier animation data
 *
 * This interface describes an object containing all information necessary to run an animation, in particular to run an animation with the
 * all new (shiny) Web Animations API. When other components or services request data for an animation they have to run, this is the object
 * they get back from the animation service.
 *
 * Technical sidenote:
 * Nope, it's not a coincidence - the structure looks similar to the Web Animation API syntax.
 * @record
 */
export function NotifierAnimationData() { }
if (false) {
    /**
     * Animation keyframes; the first index ctonaining changes for animate-in, the second index those for animate-out
     * @type {?}
     */
    NotifierAnimationData.prototype.keyframes;
    /**
     * Futher animation options
     * @type {?}
     */
    NotifierAnimationData.prototype.options;
}
/**
 * Notifier animation preset
 *
 * This interface describes the structure of an animation preset, defining the keyframes for both animating-in and animating-out. Animation
 * presets are always defined outside the animation service, and therefore one day may become part of some new API.
 * @record
 */
export function NotifierAnimationPreset() { }
if (false) {
    /**
     * Function generating the keyframes for animating-out
     * @type {?}
     */
    NotifierAnimationPreset.prototype.hide;
    /**
     * Function generating the keyframes for animating-in
     * @type {?}
     */
    NotifierAnimationPreset.prototype.show;
}
/**
 * Notifier animation keyframes
 *
 * This interface describes the data, in particular all the keyframes animation presets return.
 * @record
 */
export function NotifierAnimationPresetKeyframes() { }
if (false) {
    /**
     * CSS attributes before the animation starts
     * @type {?}
     */
    NotifierAnimationPresetKeyframes.prototype.from;
    /**
     * CSS attributes after the animation ends
     * @type {?}
     */
    NotifierAnimationPresetKeyframes.prototype.to;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItYW5pbWF0aW9uLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1ub3RpZmllci8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvbm90aWZpZXItYW5pbWF0aW9uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQSwyQ0EyQkM7Ozs7OztJQXZCQywwQ0FFRzs7Ozs7SUFLSCx3Q0FlRTs7Ozs7Ozs7O0FBU0osNkNBVUM7Ozs7OztJQU5DLHVDQUErRTs7Ozs7SUFLL0UsdUNBQStFOzs7Ozs7OztBQVFqRixzREFjQzs7Ozs7O0lBVkMsZ0RBRUU7Ozs7O0lBS0YsOENBRUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb3RpZmllck5vdGlmaWNhdGlvbiB9IGZyb20gJy4vbm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsJztcblxuLyoqXG4gKiBOb3RpZmllciBhbmltYXRpb24gZGF0YVxuICpcbiAqIFRoaXMgaW50ZXJmYWNlIGRlc2NyaWJlcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgaW5mb3JtYXRpb24gbmVjZXNzYXJ5IHRvIHJ1biBhbiBhbmltYXRpb24sIGluIHBhcnRpY3VsYXIgdG8gcnVuIGFuIGFuaW1hdGlvbiB3aXRoIHRoZVxuICogYWxsIG5ldyAoc2hpbnkpIFdlYiBBbmltYXRpb25zIEFQSS4gV2hlbiBvdGhlciBjb21wb25lbnRzIG9yIHNlcnZpY2VzIHJlcXVlc3QgZGF0YSBmb3IgYW4gYW5pbWF0aW9uIHRoZXkgaGF2ZSB0byBydW4sIHRoaXMgaXMgdGhlIG9iamVjdFxuICogdGhleSBnZXQgYmFjayBmcm9tIHRoZSBhbmltYXRpb24gc2VydmljZS5cbiAqXG4gKiBUZWNobmljYWwgc2lkZW5vdGU6XG4gKiBOb3BlLCBpdCdzIG5vdCBhIGNvaW5jaWRlbmNlIC0gdGhlIHN0cnVjdHVyZSBsb29rcyBzaW1pbGFyIHRvIHRoZSBXZWIgQW5pbWF0aW9uIEFQSSBzeW50YXguXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTm90aWZpZXJBbmltYXRpb25EYXRhIHtcbiAgLyoqXG4gICAqIEFuaW1hdGlvbiBrZXlmcmFtZXM7IHRoZSBmaXJzdCBpbmRleCBjdG9uYWluaW5nIGNoYW5nZXMgZm9yIGFuaW1hdGUtaW4sIHRoZSBzZWNvbmQgaW5kZXggdGhvc2UgZm9yIGFuaW1hdGUtb3V0XG4gICAqL1xuICBrZXlmcmFtZXM6IEFycmF5PHtcbiAgICBbYW5pbWF0YWJsZVByb3BlcnR5TmFtZTogc3RyaW5nXTogc3RyaW5nO1xuICB9PjtcblxuICAvKipcbiAgICogRnV0aGVyIGFuaW1hdGlvbiBvcHRpb25zXG4gICAqL1xuICBvcHRpb25zOiB7XG4gICAgLyoqXG4gICAgICogQW5pbWF0aW9uIGR1cmF0aW9uLCBpbiBtc1xuICAgICAqL1xuICAgIGR1cmF0aW9uOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBBbmltYXRpb24gZWFzaW5nIGZ1bmN0aW9uIChjb21wLiBDU1MgZWFzaW5nIGZ1bmN0aW9ucylcbiAgICAgKi9cbiAgICBlYXNpbmc/OiAnbGluZWFyJyB8ICdlYXNlJyB8ICdlYXNlLWluJyB8ICdlYXNlLW91dCcgfCAnZWFzZS1pbi1vdXQnIHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQW5pbWF0aW9uIGZpbGwgbW9kZVxuICAgICAqL1xuICAgIGZpbGw6ICdub25lJyB8ICdmb3J3YXJkcycgfCAnYmFja3dhcmRzJztcbiAgfTtcbn1cblxuLyoqXG4gKiBOb3RpZmllciBhbmltYXRpb24gcHJlc2V0XG4gKlxuICogVGhpcyBpbnRlcmZhY2UgZGVzY3JpYmVzIHRoZSBzdHJ1Y3R1cmUgb2YgYW4gYW5pbWF0aW9uIHByZXNldCwgZGVmaW5pbmcgdGhlIGtleWZyYW1lcyBmb3IgYm90aCBhbmltYXRpbmctaW4gYW5kIGFuaW1hdGluZy1vdXQuIEFuaW1hdGlvblxuICogcHJlc2V0cyBhcmUgYWx3YXlzIGRlZmluZWQgb3V0c2lkZSB0aGUgYW5pbWF0aW9uIHNlcnZpY2UsIGFuZCB0aGVyZWZvcmUgb25lIGRheSBtYXkgYmVjb21lIHBhcnQgb2Ygc29tZSBuZXcgQVBJLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0IHtcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGdlbmVyYXRpbmcgdGhlIGtleWZyYW1lcyBmb3IgYW5pbWF0aW5nLW91dFxuICAgKi9cbiAgaGlkZTogKG5vdGlmaWNhdGlvbjogTm90aWZpZXJOb3RpZmljYXRpb24pID0+IE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0S2V5ZnJhbWVzO1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiBnZW5lcmF0aW5nIHRoZSBrZXlmcmFtZXMgZm9yIGFuaW1hdGluZy1pblxuICAgKi9cbiAgc2hvdzogKG5vdGlmaWNhdGlvbjogTm90aWZpZXJOb3RpZmljYXRpb24pID0+IE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0S2V5ZnJhbWVzO1xufVxuXG4vKipcbiAqIE5vdGlmaWVyIGFuaW1hdGlvbiBrZXlmcmFtZXNcbiAqXG4gKiBUaGlzIGludGVyZmFjZSBkZXNjcmliZXMgdGhlIGRhdGEsIGluIHBhcnRpY3VsYXIgYWxsIHRoZSBrZXlmcmFtZXMgYW5pbWF0aW9uIHByZXNldHMgcmV0dXJuLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0S2V5ZnJhbWVzIHtcbiAgLyoqXG4gICAqIENTUyBhdHRyaWJ1dGVzIGJlZm9yZSB0aGUgYW5pbWF0aW9uIHN0YXJ0c1xuICAgKi9cbiAgZnJvbToge1xuICAgIFthbmltYXRhYmxlUHJvcGVydHlOYW1lOiBzdHJpbmddOiBzdHJpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIENTUyBhdHRyaWJ1dGVzIGFmdGVyIHRoZSBhbmltYXRpb24gZW5kc1xuICAgKi9cbiAgdG86IHtcbiAgICBbYW5pbWF0YWJsZVByb3BlcnR5TmFtZTogc3RyaW5nXTogc3RyaW5nO1xuICB9O1xufVxuIl19