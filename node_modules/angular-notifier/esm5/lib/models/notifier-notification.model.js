/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/notifier-notification.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Notification
 *
 * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.
 */
var /**
 * Notification
 *
 * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.
 */
NotifierNotification = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param options Notifier options
     */
    function NotifierNotification(options) {
        /**
         * The template to customize
         * the appearance of the notification
         */
        this.template = null;
        Object.assign(this, options);
        // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser
        // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,
        // is not possible due to the action queue concept.
        if (options.id === undefined) {
            this.id = "ID_" + new Date().getTime();
        }
    }
    return NotifierNotification;
}());
/**
 * Notification
 *
 * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.
 */
export { NotifierNotification };
if (false) {
    /**
     * Unique notification ID, can be set manually to control the notification from outside later on
     * @type {?}
     */
    NotifierNotification.prototype.id;
    /**
     * Notification type, will be used for constructing an appropriate class name
     * @type {?}
     */
    NotifierNotification.prototype.type;
    /**
     * Notification message
     * @type {?}
     */
    NotifierNotification.prototype.message;
    /**
     * The template to customize
     * the appearance of the notification
     * @type {?}
     */
    NotifierNotification.prototype.template;
    /**
     * Component reference of this notification, created and set during creation time
     * @type {?}
     */
    NotifierNotification.prototype.component;
}
/**
 * Notifiction options
 *
 * This interface describes which information are needed to create a new notification, or in other words, which information the external API
 * call must provide.
 * @record
 */
export function NotifierNotificationOptions() { }
if (false) {
    /**
     * Notification ID, optional
     * @type {?|undefined}
     */
    NotifierNotificationOptions.prototype.id;
    /**
     * Notification type
     * @type {?}
     */
    NotifierNotificationOptions.prototype.type;
    /**
     * Notificatin message
     * @type {?}
     */
    NotifierNotificationOptions.prototype.message;
    /**
     * The template to customize
     * the appearance of the notification
     * @type {?|undefined}
     */
    NotifierNotificationOptions.prototype.template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1ub3RpZmllci8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvbm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFTQTs7Ozs7O0lBMkJFOzs7O09BSUc7SUFDSCw4QkFBbUIsT0FBb0M7Ozs7O1FBWmhELGFBQVEsR0FBc0IsSUFBSSxDQUFDO1FBYXhDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTdCLGdJQUFnSTtRQUNoSSxtSUFBbUk7UUFDbkksbURBQW1EO1FBQ25ELElBQUksT0FBTyxDQUFDLEVBQUUsS0FBSyxTQUFTLEVBQUU7WUFDNUIsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFNLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFJLENBQUM7U0FDeEM7SUFDSCxDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQUFDLEFBMUNELElBMENDOzs7Ozs7Ozs7Ozs7SUF0Q0Msa0NBQWtCOzs7OztJQUtsQixvQ0FBb0I7Ozs7O0lBS3BCLHVDQUF1Qjs7Ozs7O0lBTXZCLHdDQUEwQzs7Ozs7SUFLMUMseUNBQWdEOzs7Ozs7Ozs7QUF5QmxELGlEQXFCQzs7Ozs7O0lBakJDLHlDQUFZOzs7OztJQUtaLDJDQUFhOzs7OztJQUtiLDhDQUFnQjs7Ozs7O0lBTWhCLCtDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE5vdGlmaWVyTm90aWZpY2F0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9ub3RpZmllci1ub3RpZmljYXRpb24uY29tcG9uZW50JztcblxuLyoqXG4gKiBOb3RpZmljYXRpb25cbiAqXG4gKiBUaGlzIGNsYXNzIGRlc2NyaWJlcyB0aGUgc3RydWN0dXJlIG9mIGEgbm90aWZpY3Rpb24sIGluY2x1ZGluZyBhbGwgaW5mb3JtYXRpb24gaXQgbmVlZHMgdG8gbGl2ZSwgYW5kIGV2ZXJ5b25lIGVsc2UgbmVlZHMgdG8gd29yayB3aXRoIGl0LlxuICovXG5leHBvcnQgY2xhc3MgTm90aWZpZXJOb3RpZmljYXRpb24ge1xuICAvKipcbiAgICogVW5pcXVlIG5vdGlmaWNhdGlvbiBJRCwgY2FuIGJlIHNldCBtYW51YWxseSB0byBjb250cm9sIHRoZSBub3RpZmljYXRpb24gZnJvbSBvdXRzaWRlIGxhdGVyIG9uXG4gICAqL1xuICBwdWJsaWMgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogTm90aWZpY2F0aW9uIHR5cGUsIHdpbGwgYmUgdXNlZCBmb3IgY29uc3RydWN0aW5nIGFuIGFwcHJvcHJpYXRlIGNsYXNzIG5hbWVcbiAgICovXG4gIHB1YmxpYyB0eXBlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE5vdGlmaWNhdGlvbiBtZXNzYWdlXG4gICAqL1xuICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdGVtcGxhdGUgdG8gY3VzdG9taXplXG4gICAqIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBub3RpZmljYXRpb25cbiAgICovXG4gIHB1YmxpYyB0ZW1wbGF0ZT86IFRlbXBsYXRlUmVmPGFueT4gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBDb21wb25lbnQgcmVmZXJlbmNlIG9mIHRoaXMgbm90aWZpY2F0aW9uLCBjcmVhdGVkIGFuZCBzZXQgZHVyaW5nIGNyZWF0aW9uIHRpbWVcbiAgICovXG4gIHB1YmxpYyBjb21wb25lbnQ6IE5vdGlmaWVyTm90aWZpY2F0aW9uQ29tcG9uZW50O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyBOb3RpZmllciBvcHRpb25zXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Iob3B0aW9uczogTm90aWZpZXJOb3RpZmljYXRpb25PcHRpb25zKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcblxuICAgIC8vIElmIG5vdCBzZXQgbWFudWFsbHksIHdlIGhhdmUgdG8gY3JlYXRlIGEgdW5pcXVlIG5vdGlmaWNhdGlvbiBJRCBieSBvdXJzZWx2ZXMuIFRoZSBJRCBnZW5lcmF0aW9uIHJlbGllcyBvbiB0aGUgY3VycmVudCBicm93c2VyXG4gICAgLy8gZGF0ZXRpbWUgaW4gbXMsIGluIHByYXRpY3VsYXIgdGhlIG1vbWVudCB0aGlzIG5vdGlmaWNhdGlvbiBnZXRzIGNvbnN0cnVjdGVkLiBDb25jdXJyZW5jeSwgYW5kIHRodXMgdHdvIElEcyBiZWluZyB0aGUgZXhhY3Qgc2FtZSxcbiAgICAvLyBpcyBub3QgcG9zc2libGUgZHVlIHRvIHRoZSBhY3Rpb24gcXVldWUgY29uY2VwdC5cbiAgICBpZiAob3B0aW9ucy5pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlkID0gYElEXyR7bmV3IERhdGUoKS5nZXRUaW1lKCl9YDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBOb3RpZmljdGlvbiBvcHRpb25zXG4gKlxuICogVGhpcyBpbnRlcmZhY2UgZGVzY3JpYmVzIHdoaWNoIGluZm9ybWF0aW9uIGFyZSBuZWVkZWQgdG8gY3JlYXRlIGEgbmV3IG5vdGlmaWNhdGlvbiwgb3IgaW4gb3RoZXIgd29yZHMsIHdoaWNoIGluZm9ybWF0aW9uIHRoZSBleHRlcm5hbCBBUElcbiAqIGNhbGwgbXVzdCBwcm92aWRlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5vdGlmaWVyTm90aWZpY2F0aW9uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBOb3RpZmljYXRpb24gSUQsIG9wdGlvbmFsXG4gICAqL1xuICBpZD86IHN0cmluZztcblxuICAvKipcbiAgICogTm90aWZpY2F0aW9uIHR5cGVcbiAgICovXG4gIHR5cGU6IHN0cmluZztcblxuICAvKipcbiAgICogTm90aWZpY2F0aW4gbWVzc2FnZVxuICAgKi9cbiAgbWVzc2FnZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdGVtcGxhdGUgdG8gY3VzdG9taXplXG4gICAqIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBub3RpZmljYXRpb25cbiAgICovXG4gIHRlbXBsYXRlPzogVGVtcGxhdGVSZWY8YW55Pjtcbn1cbiJdfQ==