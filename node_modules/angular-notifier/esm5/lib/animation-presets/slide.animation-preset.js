/**
 * @fileoverview added by tsickle
 * Generated from: lib/animation-presets/slide.animation-preset.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ɵ0 = /**
 * @param {?} notification
 * @return {?}
 */
function (notification) {
    // Prepare variables
    /** @type {?} */
    var config = notification.component.getConfig();
    /** @type {?} */
    var shift = notification.component.getShift();
    /** @type {?} */
    var from;
    /** @type {?} */
    var to;
    // Configure variables, depending on configuration and component
    if (config.position.horizontal.position === 'left') {
        from = {
            transform: "translate3d( 0, " + shift + "px, 0 )",
        };
        to = {
            transform: "translate3d( calc( -100% - " + config.position.horizontal.distance + "px - 10px ), " + shift + "px, 0 )",
        };
    }
    else if (config.position.horizontal.position === 'right') {
        from = {
            transform: "translate3d( 0, " + shift + "px, 0 )",
        };
        to = {
            transform: "translate3d( calc( 100% + " + config.position.horizontal.distance + "px + 10px ), " + shift + "px, 0 )",
        };
    }
    else {
        /** @type {?} */
        var horizontalPosition = void 0;
        if (config.position.vertical.position === 'top') {
            horizontalPosition = "calc( -100% - " + config.position.horizontal.distance + "px - 10px )";
        }
        else {
            horizontalPosition = "calc( 100% + " + config.position.horizontal.distance + "px + 10px )";
        }
        from = {
            transform: "translate3d( -50%, " + shift + "px, 0 )",
        };
        to = {
            transform: "translate3d( -50%, " + horizontalPosition + ", 0 )",
        };
    }
    // Done
    return {
        from: from,
        to: to,
    };
}, ɵ1 = /**
 * @param {?} notification
 * @return {?}
 */
function (notification) {
    // Prepare variables
    /** @type {?} */
    var config = notification.component.getConfig();
    /** @type {?} */
    var from;
    /** @type {?} */
    var to;
    // Configure variables, depending on configuration and component
    if (config.position.horizontal.position === 'left') {
        from = {
            transform: "translate3d( calc( -100% - " + config.position.horizontal.distance + "px - 10px ), 0, 0 )",
        };
        to = {
            transform: 'translate3d( 0, 0, 0 )',
        };
    }
    else if (config.position.horizontal.position === 'right') {
        from = {
            transform: "translate3d( calc( 100% + " + config.position.horizontal.distance + "px + 10px ), 0, 0 )",
        };
        to = {
            transform: 'translate3d( 0, 0, 0 )',
        };
    }
    else {
        /** @type {?} */
        var horizontalPosition = void 0;
        if (config.position.vertical.position === 'top') {
            horizontalPosition = "calc( -100% - " + config.position.horizontal.distance + "px - 10px )";
        }
        else {
            horizontalPosition = "calc( 100% + " + config.position.horizontal.distance + "px + 10px )";
        }
        from = {
            transform: "translate3d( -50%, " + horizontalPosition + ", 0 )",
        };
        to = {
            transform: 'translate3d( -50%, 0, 0 )',
        };
    }
    // Done
    return {
        from: from,
        to: to,
    };
};
/**
 * Slide animation preset
 * @type {?}
 */
export var slide = {
    hide: (ɵ0),
    show: (ɵ1),
};
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGUuYW5pbWF0aW9uLXByZXNldC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItbm90aWZpZXIvIiwic291cmNlcyI6WyJsaWIvYW5pbWF0aW9uLXByZXNldHMvc2xpZGUuYW5pbWF0aW9uLXByZXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFRUSxVQUFDLFlBQWtDOzs7UUFFakMsTUFBTSxHQUFtQixZQUFZLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRTs7UUFDM0QsS0FBSyxHQUFXLFlBQVksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFOztRQUNuRCxJQUVIOztRQUNHLEVBRUg7SUFFRCxnRUFBZ0U7SUFDaEUsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEtBQUssTUFBTSxFQUFFO1FBQ2xELElBQUksR0FBRztZQUNMLFNBQVMsRUFBRSxxQkFBbUIsS0FBSyxZQUFTO1NBQzdDLENBQUM7UUFDRixFQUFFLEdBQUc7WUFDSCxTQUFTLEVBQUUsZ0NBQThCLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEscUJBQWdCLEtBQUssWUFBUztTQUMzRyxDQUFDO0tBQ0g7U0FBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsS0FBSyxPQUFPLEVBQUU7UUFDMUQsSUFBSSxHQUFHO1lBQ0wsU0FBUyxFQUFFLHFCQUFtQixLQUFLLFlBQVM7U0FDN0MsQ0FBQztRQUNGLEVBQUUsR0FBRztZQUNILFNBQVMsRUFBRSwrQkFBNkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxxQkFBZ0IsS0FBSyxZQUFTO1NBQzFHLENBQUM7S0FDSDtTQUFNOztZQUNELGtCQUFrQixTQUFRO1FBQzlCLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxLQUFLLEtBQUssRUFBRTtZQUMvQyxrQkFBa0IsR0FBRyxtQkFBaUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxnQkFBYSxDQUFDO1NBQ3hGO2FBQU07WUFDTCxrQkFBa0IsR0FBRyxrQkFBZ0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxnQkFBYSxDQUFDO1NBQ3ZGO1FBQ0QsSUFBSSxHQUFHO1lBQ0wsU0FBUyxFQUFFLHdCQUFzQixLQUFLLFlBQVM7U0FDaEQsQ0FBQztRQUNGLEVBQUUsR0FBRztZQUNILFNBQVMsRUFBRSx3QkFBc0Isa0JBQWtCLFVBQU87U0FDM0QsQ0FBQztLQUNIO0lBRUQsT0FBTztJQUNQLE9BQU87UUFDTCxJQUFJLE1BQUE7UUFDSixFQUFFLElBQUE7S0FDSCxDQUFDO0FBQ0osQ0FBQzs7OztBQUNLLFVBQUMsWUFBa0M7OztRQUVqQyxNQUFNLEdBQW1CLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFOztRQUM3RCxJQUVIOztRQUNHLEVBRUg7SUFFRCxnRUFBZ0U7SUFDaEUsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEtBQUssTUFBTSxFQUFFO1FBQ2xELElBQUksR0FBRztZQUNMLFNBQVMsRUFBRSxnQ0FBOEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSx3QkFBcUI7U0FDbEcsQ0FBQztRQUNGLEVBQUUsR0FBRztZQUNILFNBQVMsRUFBRSx3QkFBd0I7U0FDcEMsQ0FBQztLQUNIO1NBQU0sSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEtBQUssT0FBTyxFQUFFO1FBQzFELElBQUksR0FBRztZQUNMLFNBQVMsRUFBRSwrQkFBNkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSx3QkFBcUI7U0FDakcsQ0FBQztRQUNGLEVBQUUsR0FBRztZQUNILFNBQVMsRUFBRSx3QkFBd0I7U0FDcEMsQ0FBQztLQUNIO1NBQU07O1lBQ0Qsa0JBQWtCLFNBQVE7UUFDOUIsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEtBQUssS0FBSyxFQUFFO1lBQy9DLGtCQUFrQixHQUFHLG1CQUFpQixNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLGdCQUFhLENBQUM7U0FDeEY7YUFBTTtZQUNMLGtCQUFrQixHQUFHLGtCQUFnQixNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLGdCQUFhLENBQUM7U0FDdkY7UUFDRCxJQUFJLEdBQUc7WUFDTCxTQUFTLEVBQUUsd0JBQXNCLGtCQUFrQixVQUFPO1NBQzNELENBQUM7UUFDRixFQUFFLEdBQUc7WUFDSCxTQUFTLEVBQUUsMkJBQTJCO1NBQ3ZDLENBQUM7S0FDSDtJQUVELE9BQU87SUFDUCxPQUFPO1FBQ0wsSUFBSSxNQUFBO1FBQ0osRUFBRSxJQUFBO0tBQ0gsQ0FBQztBQUNKLENBQUM7Ozs7O0FBN0ZILE1BQU0sS0FBTyxLQUFLLEdBQTRCO0lBQzVDLElBQUksTUE4Q0g7SUFDRCxJQUFJLE1BNkNIO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb3RpZmllckFuaW1hdGlvblByZXNldCwgTm90aWZpZXJBbmltYXRpb25QcmVzZXRLZXlmcmFtZXMgfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItYW5pbWF0aW9uLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWVyLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBOb3RpZmllck5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1ub3RpZmljYXRpb24ubW9kZWwnO1xuXG4vKipcbiAqIFNsaWRlIGFuaW1hdGlvbiBwcmVzZXRcbiAqL1xuZXhwb3J0IGNvbnN0IHNsaWRlOiBOb3RpZmllckFuaW1hdGlvblByZXNldCA9IHtcbiAgaGlkZTogKG5vdGlmaWNhdGlvbjogTm90aWZpZXJOb3RpZmljYXRpb24pOiBOb3RpZmllckFuaW1hdGlvblByZXNldEtleWZyYW1lcyA9PiB7XG4gICAgLy8gUHJlcGFyZSB2YXJpYWJsZXNcbiAgICBjb25zdCBjb25maWc6IE5vdGlmaWVyQ29uZmlnID0gbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKTtcbiAgICBjb25zdCBzaGlmdDogbnVtYmVyID0gbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRTaGlmdCgpO1xuICAgIGxldCBmcm9tOiB7XG4gICAgICBbYW5pbWF0YWJsZVByb3BlcnR5TmFtZTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG4gICAgbGV0IHRvOiB7XG4gICAgICBbYW5pbWF0YWJsZVByb3BlcnR5TmFtZTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG5cbiAgICAvLyBDb25maWd1cmUgdmFyaWFibGVzLCBkZXBlbmRpbmcgb24gY29uZmlndXJhdGlvbiBhbmQgY29tcG9uZW50XG4gICAgaWYgKGNvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLnBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgIGZyb20gPSB7XG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCAwLCAke3NoaWZ0fXB4LCAwIClgLFxuICAgICAgfTtcbiAgICAgIHRvID0ge1xuICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCggY2FsYyggLTEwMCUgLSAke2NvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLmRpc3RhbmNlfXB4IC0gMTBweCApLCAke3NoaWZ0fXB4LCAwIClgLFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLnBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICBmcm9tID0ge1xuICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCggMCwgJHtzaGlmdH1weCwgMCApYCxcbiAgICAgIH07XG4gICAgICB0byA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoIGNhbGMoIDEwMCUgKyAke2NvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLmRpc3RhbmNlfXB4ICsgMTBweCApLCAke3NoaWZ0fXB4LCAwIClgLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGhvcml6b250YWxQb3NpdGlvbjogc3RyaW5nO1xuICAgICAgaWYgKGNvbmZpZy5wb3NpdGlvbi52ZXJ0aWNhbC5wb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uID0gYGNhbGMoIC0xMDAlIC0gJHtjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5kaXN0YW5jZX1weCAtIDEwcHggKWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBob3Jpem9udGFsUG9zaXRpb24gPSBgY2FsYyggMTAwJSArICR7Y29uZmlnLnBvc2l0aW9uLmhvcml6b250YWwuZGlzdGFuY2V9cHggKyAxMHB4IClgO1xuICAgICAgfVxuICAgICAgZnJvbSA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoIC01MCUsICR7c2hpZnR9cHgsIDAgKWAsXG4gICAgICB9O1xuICAgICAgdG8gPSB7XG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCAtNTAlLCAke2hvcml6b250YWxQb3NpdGlvbn0sIDAgKWAsXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIERvbmVcbiAgICByZXR1cm4ge1xuICAgICAgZnJvbSxcbiAgICAgIHRvLFxuICAgIH07XG4gIH0sXG4gIHNob3c6IChub3RpZmljYXRpb246IE5vdGlmaWVyTm90aWZpY2F0aW9uKTogTm90aWZpZXJBbmltYXRpb25QcmVzZXRLZXlmcmFtZXMgPT4ge1xuICAgIC8vIFByZXBhcmUgdmFyaWFibGVzXG4gICAgY29uc3QgY29uZmlnOiBOb3RpZmllckNvbmZpZyA9IG5vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCk7XG4gICAgbGV0IGZyb206IHtcbiAgICAgIFthbmltYXRhYmxlUHJvcGVydHlOYW1lOiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcbiAgICBsZXQgdG86IHtcbiAgICAgIFthbmltYXRhYmxlUHJvcGVydHlOYW1lOiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcblxuICAgIC8vIENvbmZpZ3VyZSB2YXJpYWJsZXMsIGRlcGVuZGluZyBvbiBjb25maWd1cmF0aW9uIGFuZCBjb21wb25lbnRcbiAgICBpZiAoY29uZmlnLnBvc2l0aW9uLmhvcml6b250YWwucG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgZnJvbSA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoIGNhbGMoIC0xMDAlIC0gJHtjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5kaXN0YW5jZX1weCAtIDEwcHggKSwgMCwgMCApYCxcbiAgICAgIH07XG4gICAgICB0byA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoIDAsIDAsIDAgKScsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoY29uZmlnLnBvc2l0aW9uLmhvcml6b250YWwucG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIGZyb20gPSB7XG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCBjYWxjKCAxMDAlICsgJHtjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5kaXN0YW5jZX1weCArIDEwcHggKSwgMCwgMCApYCxcbiAgICAgIH07XG4gICAgICB0byA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoIDAsIDAsIDAgKScsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgaG9yaXpvbnRhbFBvc2l0aW9uOiBzdHJpbmc7XG4gICAgICBpZiAoY29uZmlnLnBvc2l0aW9uLnZlcnRpY2FsLnBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgICBob3Jpem9udGFsUG9zaXRpb24gPSBgY2FsYyggLTEwMCUgLSAke2NvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLmRpc3RhbmNlfXB4IC0gMTBweCApYDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhvcml6b250YWxQb3NpdGlvbiA9IGBjYWxjKCAxMDAlICsgJHtjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5kaXN0YW5jZX1weCArIDEwcHggKWA7XG4gICAgICB9XG4gICAgICBmcm9tID0ge1xuICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCggLTUwJSwgJHtob3Jpem9udGFsUG9zaXRpb259LCAwIClgLFxuICAgICAgfTtcbiAgICAgIHRvID0ge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCggLTUwJSwgMCwgMCApJyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRG9uZVxuICAgIHJldHVybiB7XG4gICAgICBmcm9tLFxuICAgICAgdG8sXG4gICAgfTtcbiAgfSxcbn07XG4iXX0=